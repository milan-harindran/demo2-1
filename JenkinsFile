pipeline {
    agent any
    stages {
        stage('Get Jenkins URL'){
            steps {
                echo "Jenkins URL --> $JENKINS_URL}"
            }
        }
        stage('Call External API'){
            steps {
                //we use groovy in script tag here to write the code 
                script {
                    def apiResponse
                    try{
                        apiResponse = httpRequest url: 'https://api.sampleapis.com/avatar/episodes',
                                                  contentType: 'APPLICATION_JSON',
                                                  consoleLogResponseBody: false,
                                                  httpMode: 'GET'
                         def episodes = readJSON text: apiResponse.content

                         if (episodes && episodes.size() > 0) {
                            echo "\n--- Listing All Avatar Episodes (${episodes.size()} total) ---"
                            echo "----------------------------------------------------"

                            // 4. Iterate through each episode and print its details
                            episodes.each { episode ->
                                // Use Groovy's safe navigation operator (?.) to prevent errors if a field is missing
                                // Use .join(', ') for arrays like 'WrittenBy' to print them nicely
                                echo "Episode ID: ${episode.id ?: 'N/A'}"
                                echo "  Title: ${episode.Title ?: 'N/A'}"
                                echo "  Season: ${episode.Season ?: 'N/A'}, Episode Number: ${episode.NumInSeason ?: 'N/A'}"
                                echo "  Directed By: ${episode.DirectedBy ?: 'N/A'}"
                                echo "  Written By: ${episode.WrittenBy ? episode.WrittenBy.join(', ') : 'N/A'}"
                                echo "  Original Air Date: ${episode.OriginalAirDate ?: 'N/A'}"
                                echo "----------------------------------------------------"
                            }
                            echo "--- End of Episode List ---"
                         }
                    } catch (Exception e){
                        echo "Error calling external API: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error('Failed to call external API')
                    }
                }
            }
        }
        stage('Get Info from Another Jenkins Pipeline Build'){
            steps{
                script {
                    def otherJobName = 'demo3-3'
                    def otherBuildNumber = '4'
                    def jenkinsApiUrl = "${JENKINS_URL}job/${otherJobName}/${otherBuildNumber}/api/json"

                    def buildInfoResponse = httpRequest url: jenkinsApiUrl,
                                                  contentType: 'APPLICATION_JSON',
                                                  authentication: '11b1829c85bcde026e669176bfc52dd95c',
                                                  consoleLogResponseBody: false,
                                                  httpMode: 'GET'
                    echo "Jenkins API Response Status: ${buildInfoResponse.status}"
                    echo "Jenkins API Response Body: ${buildInfoResponse.content}"

                    def buildInfo = readJSON text: buildInfoResponse.content
                    echo "Other job '${otherJobName}' build ${buildInfo.id} result: ${buildInfo.result}"
                    echo "Other job description: ${buildInfo.description}"
                }
            }
        }
    }
}